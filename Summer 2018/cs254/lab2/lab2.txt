Script started on Tue 22 May 2018 03:50:55 PM EDT
]0;david11n@ltsp-amd64-charlie: ~/github/Scratch_Files/cs254/lab2[01;32mdavid11n@ltsp-amd64-charlie[00m:[01;34m~/github/Scratch_Files/cs254/lab2[00m$ cat lab2.c
/* Name: lab2.c
   Purpose: Lab 2
   Author: Ben Davidson
           104924033
   CS254 Lab Section
   Date: 0522-2018 12:24
*/

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>

#define MIN -99         // min random value
#define MAX 99          // max random value
#define SIZE 15         // size of the array
#define TESTS 10        // how many times to test

#define DEBUG 0

/***** PROTOTYPE FUNCTIONS ******/
int randomNumberGenerator();
void header();

int main()
{
    // Random number seed
    time_t t;
    srand(time(&t));

    // test random num loop
    if (DEBUG)
    {
        for(int i = 0 ; i < 100 ; ++i)
        {
            printf("%5d", randomNumberGenerator());
        }
    }
    
    // header
    header();

    // Run the algorithm TESTS (10) times
    for (int i = 0 ; i < TESTS; ++i)
    {
        // Generate an array of 15 random int
        //int sequence[SIZE] = {-99, 94, -96, 12, 99, 41, -4, -62, -29, 50};
        int sequence[SIZE];                                         // array for the random int
        char seqString[97] = {};                                    // char array to hold the sequence as a string
        for (int i = 0 ; i < SIZE ; ++i)                            // builds the random int array
        {
            if (!DEBUG) sequence[i] = randomNumberGenerator();                  // inserts a random int in the array

            // builds a string of the sequence. Used to confirm results
            int length = snprintf(NULL, 0, "%3d ", sequence[i]);    // determines the length
            char* digit = malloc(length + 1);                       // allocates memory to the string
            snprintf(digit, length + 1, "%3d ", sequence[i]);       // creates a string from the random int
            strcat(seqString, digit);                               // concats the newest random in to the string 
            // printf("\n%60s\n", seqString);
            free(digit);                                            // frees the memory

        }

        // setup variables
        //int i = 1;                                                  // the next potential starting point for a max sum
        int j = 0;                                                  // the current position in the array
        int maxSum = 0;                                             // the max sum found
        int sum = 0;                                                // the current sum
        int start = -1;                                             // the start of the max sum
        int end = -1;                                               // the end of the max sum
        int tracker[SIZE][3] ={};                                   // end[index], start, sum

        // algorithm 2 from text
        // while (j <= SIZE)                                           // run while less then the SIZE of the array
        // {
        //     sum = sum + sequence[j];                                // the current sum plus the current value in the array
        //     if (sum > maxSum)                                       // set a new max sum
        //     {
        //         maxSum = sum;
        //         start = i;                                          // new max sum start position
        //         end = j;                                            // new max sum end position (same as start)
        //     }
        //     if (sum <= 0)                                           // if sum is <= 0 current value cannot be part of the sequence
        //     {
        //         i = j + 1;
        //         sum = 0;
        //     }

        //     j++;                                                    // increment the position
        // }

        while (j <= SIZE)
        {
            // set the sum
            if (j > 0) 
            {
                tracker[j][2] = tracker[j-1][2] + sequence[j];
            }
            else
            {
                tracker[j][2] = sequence[j];
            }

            if (tracker[j][2] < 0) tracker[j][2] = 0;                   // if less then 0, use empty set

            // set the start
            if (j >= 0  && tracker[j-1][2] > 0)                         // if the previous has a +ve sum use its start
            {
                tracker[j][1] = tracker[j-1][1];
            }
            else 
            {
                tracker[j][1] = j;                                      // use fresh start position
            }

            // set the end
            tracker[j][0] = j;                                          // end at the currrent postiion

            if (tracker[j][2] <= 0)                                     // adjust for empty set
            {
                //i = j + 1;
                tracker[j][0] = j;
                tracker[j][1] = -1;
                tracker[j][2] = 0;
            }

            j++;
        }

        j = 0;

        // loop to find max
        while (j <= SIZE)
        {
            
            if (j == 0 || tracker[j][2] > maxSum)                       // set initial valuea and change max values 
            {
                maxSum = tracker[j][2];
                start = tracker[j][1];
                end = tracker[j][0];
            }
            // else if (j == 0)
            // {
            //     maxSum = tracker[j][2];
            //     start = tracker[j][1];
            //     end = tracker[j][0];
            // }

            j++;
        }
        //output
        printf("+------------------------------------------ Test %2d -------------------------------------------+\n", i+1);
        printf("| %60s | %5d | %5d | %5d | %5d |\n| ", seqString, start, end, sum, maxSum);

        for (int i = 0; i < SIZE ; ++i)
        {
            printf("%3d ", tracker[i][1]);
        }
        printf(" | Start sequence\n| ");

        for (int i = 0 ; i < SIZE ; ++i)
        {
            printf("%3d ", tracker[i][2]);
        }
        printf(" | Segment sum\n\n");

    }
    
    printf("\n\n");
    return 1;
}

/* randomNumberGenerator: generates random numbers according the defined MAX and MIN values
 * INPUT: none
 * OUTPUT: returns a random number with the MAX and MIN values
*/
int randomNumberGenerator()
{
    return rand() % (MAX - MIN) + MIN;
}

/* header: produces a formatted header as long as MIN and MAX do not exceed +-99 (works but gets messy)
 * INPUT: none
 * OUTPUT: a formatted header
 */ 
void header()
{
    printf("\nLab 2: 60-254: Data Structures and Algorithms\n");
    printf("Ben Davidson #104924033\n");
    printf("0522-2018");
    printf("\n\n| %60s | %5s | %5s | %5s | %5s |\n| ", "Sequence", "Start", "End", "Sum", "Max");
    for (int i = 0 ; i < SIZE; ++i)
    {
        printf("%3d ", i);
    }
    printf(" |       |       |       |       |\n");
}
]0;david11n@ltsp-amd64-charlie: ~/github/Scratch_Files/cs254/lab2[01;32mdavid11n@ltsp-amd64-charlie[00m:[01;34m~/github/Scratch_Files/cs254/lab2[00m$ cc lab2.c
]0;david11n@ltsp-amd64-charlie: ~/github/Scratch_Files/cs254/lab2[01;32mdavid11n@ltsp-amd64-charlie[00m:[01;34m~/github/Scratch_Files/cs254/lab2[00m$ ./a,[K.out

Lab 2: 60-254: Data Structures and Algorithms
Ben Davidson #104924033
0522-2018

|                                                     Sequence | Start |   End |   Sum |   Max |
|   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  |       |       |       |       |
+------------------------------------------ Test  1 -------------------------------------------+
| -42 -52   1 -83 -33   3 -26   5 -50 -24 -80  87 -70 -68 -26  |    11 |    11 |     0 |    87 |
|  -1  -1   2  -1  -1   5  -1   7  -1  -1  -1  11  11  -1  -1  | Start sequence
|   0   0   1   0   0   3   0   5   0   0   0  87  17   0   0  | Segment sum

+------------------------------------------ Test  2 -------------------------------------------+
| -34 -90  74  70 -53 -45 -21  66 -23  55 -16  31 -55  73 -89  |     2 |    13 |     0 |   156 |
|  -1  -1   2   2   2   2   2   2   2   2   2   2   2   2   2  | Start sequence
|   0   0  74 144  91  46  25  91  68 123 107 138  83 156  67  | Segment sum

+------------------------------------------ Test  3 -------------------------------------------+
|  45 -68 -42 -53 -52  22  50  19 -74  97  94 -54  86 -76 -23  |     5 |    12 |     0 |   240 |
|   0  -1  -1  -1  -1   5   5   5   5   5   5   5   5   5   5  | Start sequence
|  45   0   0   0   0  22  72  91  17 114 208 154 240 164 141  | Segment sum

+------------------------------------------ Test  4 -------------------------------------------+
| -41 -11 -16 -66 -42  28 -11  37  -7  65  -7  77  -5  35  51  |     5 |    14 |     0 |   263 |
|  -1  -1  -1  -1  -1   5   5   5   5   5   5   5   5   5   5  | Start sequence
|   0   0   0   0   0  28  17  54  47 112 105 182 177 212 263  | Segment sum

+------------------------------------------ Test  5 -------------------------------------------+
|   5 -19  80  63  25 -73 -14 -26  46  12 -27  39  55 -42  62  |     2 |    14 |     0 |   200 |
|   0  -1   2   2   2   2   2   2   2   2   2   2   2   2   2  | Start sequence
|   5   0  80 143 168  95  81  55 101 113  86 125 180 138 200  | Segment sum

+------------------------------------------ Test  6 -------------------------------------------+
| -69  14 -47  12  47  10 -58 -65 -54  34  98  36  10  -6 -28  |     9 |    12 |     0 |   178 |
|  -1   1  -1   3   3   3   3  -1  -1   9   9   9   9   9   9  | Start sequence
|   0  14   0  12  59  69  11   0   0  34 132 168 178 172 144  | Segment sum

+------------------------------------------ Test  7 -------------------------------------------+
| -38 -99  52 -59  61 -23 -32 -54  50 -85  57 -78  53  11 -21  |    12 |    13 |     0 |    64 |
|  -1  -1   2  -1   4   4   4  -1   8  -1  10  -1  12  12  12  | Start sequence
|   0   0  52   0  61  38   6   0  50   0  57   0  53  64  43  | Segment sum

+------------------------------------------ Test  8 -------------------------------------------+
|  15  39  90  67 -47  39 -24  -6  71  20 -73  70 -43  37 -34  |     0 |     9 |     0 |   264 |
|   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  | Start sequence
|  15  54 144 211 164 203 179 173 244 264 191 261 218 255 221  | Segment sum

+------------------------------------------ Test  9 -------------------------------------------+
|  27  96 -36 -22 -61 -76  54   6 -31   6  18 -74  27 -28  36  |     0 |     1 |     0 |   123 |
|   0   0   0   0   0  -1   6   6   6   6   6  -1  12  -1  14  | Start sequence
|  27 123  87  65   4   0  54  60  29  35  53   0  27   0  36  | Segment sum

+------------------------------------------ Test 10 -------------------------------------------+
| -94  84 -23  93  50  27  33 -72 -78   4  45 -54 -25 -97  82  |     1 |     6 |     0 |   264 |
|  -1   1   1   1   1   1   1   1   1   1   1   1   1  -1  14  | Start sequence
|   0  84  61 154 204 231 264 192 114 118 163 109  84   0  82  | Segment sum



]0;david11n@ltsp-amd64-charlie: ~/github/Scratch_Files/cs254/lab2[01;32mdavid11n@ltsp-amd64-charlie[00m:[01;34m~/github/Scratch_Files/cs254/lab2[00m$ ls -l
total 36
-rwxr-xr-x 1 david11n temp 13184 May 22 15:51 [0m[01;32ma.out[0m
-rwxr-xr-x 1 david11n temp 13184 May 22 15:39 [01;32mlab2[0m
-rw-r--r-- 1 david11n temp  6843 May 22 15:43 lab2.c
-rw-r--r-- 1 david11n temp     0 May 22 15:50 lab2.txt
-rw-r--r-- 1 david11n temp     2 May 22 12:48 tempCodeRunnerFile.c
]0;david11n@ltsp-amd64-charlie: ~/github/Scratch_Files/cs254/lab2[01;32mdavid11n@ltsp-amd64-charlie[00m:[01;34m~/github/Scratch_Files/cs254/lab2[00m$ exitr[K
exit

Script done on Tue 22 May 2018 03:51:27 PM EDT
